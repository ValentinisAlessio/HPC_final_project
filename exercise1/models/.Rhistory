getwd()
setwd(getwd())
data = read.csv("../results_def/bcast_complete.csv")
# Convert to factors the columns Allocation and Algorithm
data$Allocation = as.factor(data$Allocation)
data$Algorithm = as.factor(data$Algorithm)
# Create a linear model
model = lm(Avg Latency(us) ~ , data = data)
# Create a linear model
model = lm("Avg Latency(us)" ~ , data = data)
# Create a linear model
model = lm("Avg Latency(us)" ~ . , data = data)
# Create a linear model
model = lm(Avg Latency(us) ~ . , data = data)
# Create a linear model
model = lm(`Avg Latency(us)` ~ . , data = data)
head(data)
# Create a linear model
model = lm(Avg.Latency.us. ~ . , data = data)
summary(model)
#try with a GAM
library(mgcv)
model_gam = gam(Avg.Latency.us. ~ Algorithm + Allocation + s(Processes) + s(MessageSize) , data = data)
summary(model_gam)
model_gam = gam(Avg.Latency.us. ~ Algorithm + Allocation + s(Processes) + MessageSize , data = data)
summary(model_gam)
# Correlation map
cor(data)
setwd(getwd())
getwd()
data = read.csv("../results_def/barrier_complete.csv")
data_barrier = read.csv("../results_def/barrier_complete.csv")
data_bcast = read.csv("../results_def/bcast_complete.csv")
# Convert to factors the columns Allocation and Algorithm
data_barrier$Allocation = as.factor(data_barrier$Allocation)
data_barrier$Algorithm = as.factor(data_barrier$Algorithm)
head(data_barrier)
cor(data_barrier)
head(data_barrier)
# Create a linear model
model_barrier = lm(Avg.Latency.us. ~ . , data = data_barrier)
summary(model_barrier)
model_gam_barrier = gam(Avg.Latency.us. ~ Algorithm + Allocation + s(Processes), data = data_barrier)
summary(model_gam_barrier)
# Create a linear model
model = lm(Avg.Latency.us. ~ . , data = data_bcast)
summary(model)
data_bcast$Algorithm = fct_collapse(data_bcast$Algorithm, "bin_tree" = c("bin_tree", "default"))
# Merge the default factor levels with bin_tree
library(forcats)
data_bcast$Algorithm = fct_collapse(data_bcast$Algorithm, "bin_tree" = c("bin_tree", "default"))
# Create a linear model
model = lm(Avg.Latency.us. ~ . , data = data_bcast)
summary(model)
data_bcast$Algorithm = fct_collapse(data_bcast$Algorithm, "bin_tree" = c("bin_tree", "default", "linear"))
data_bcast = read.csv("../results_def/bcast_complete.csv")
# Convert to factors the columns Allocation and Algorithm
data_bcast$Allocation = as.factor(data_bcast$Allocation)
data_bcast$Algorithm = as.factor(data_bcast$Algorithm)
data_bcast$Algorithm = fct_collapse(data_bcast$Algorithm, "bin_tree" = c("bin_tree", "default", "linear"))
# Create a linear model
model = lm(Avg.Latency.us. ~ . , data = data_bcast)
summary(model)
# Create a linear model
model = lm(Avg.Latency.us. ~ Allocation + Algorithm + Processes , data = data_bcast)
summary(model)
# Try to see the model only for core allocation
model2 = lm(Avg.Latency.us. ~ Algorithm + s(Processes) + MessageSize , data = data_bcast)
# Try to see the model only for core allocation
model2 = lm(Avg.Latency.us. ~ Algorithm + Processes + MessageSize , data = data_bcast)
summary(model2)
# Try to take into consideration interaction
model2 = lm(Avg.Latency.us. ~ Algorithm * Allocation * Processes * MessageSize , data = data_bcast)
summary(model2)
# Try to take into consideration interaction
model2 = lm(Avg.Latency.us. ~ Algorithm * Allocation + Allocation * Processes + MessageSize , data = data_bcast)
summary(model2)
# Try to take into consideration interaction
model2 = lm(Avg.Latency.us. ~ Algorithm * Allocation + Allocation * Processes , data = data_bcast)
summary(model2)
# Try to take into consideration interaction
model2 = lm(Avg.Latency.us. ~ Algorithm * Allocation + Allocation * Processes + Allocation * Processes * Algorithm , data = data_bcast)
summary(model2)
data_bcast = read.csv("../results_def/bcast_complete.csv")
# Convert to factors the columns Allocation and Algorithm
data_bcast$Allocation = as.factor(data_bcast$Allocation)
data_bcast$Algorithm = as.factor(data_bcast$Algorithm)
# Create a linear model
model1 = lm(Avg.Latency.us. ~ Algorithm + Allocation + Processes + MessageSize , data = data_bcast)
summary(model1)
# Try to take into consideration interaction
model2 = lm(Avg.Latency.us. ~ Algorithm * Allocation + Allocation * Processes + Allocation * Processes * Algorithm , data = data_bcast)
summary(model2)
